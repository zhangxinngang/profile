// Code generated by protoc-gen-gogo.
// source: serial.proto
// DO NOT EDIT!

/*
	Package profile is a generated protocol buffer package.

	It is generated from these files:
		serial.proto

	It has these top-level messages:
		ProtoUser
*/
package profile

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ProtoUser struct {
	Uin              uint64 `protobuf:"varint,1,req,name=uin" json:"uin"`
	AccountId        string `protobuf:"bytes,2,req,name=accountId" json:"accountId"`
	AccountName      string `protobuf:"bytes,3,req,name=accountName" json:"accountName"`
	Gender           int32  `protobuf:"varint,4,req,name=gender" json:"gender"`
	Platform         uint64 `protobuf:"varint,5,req,name=platform" json:"platform"`
	Channel          uint64 `protobuf:"varint,6,req,name=channel" json:"channel"`
	Server           uint64 `protobuf:"varint,7,req,name=server" json:"server"`
	Uuid             string `protobuf:"bytes,8,req,name=uuid" json:"uuid"`
	Os               int32  `protobuf:"varint,9,req,name=os" json:"os"`
	OsVersion        int32  `protobuf:"varint,10,req,name=osVersion" json:"osVersion"`
	DeviceModel      string `protobuf:"bytes,11,req,name=deviceModel" json:"deviceModel"`
	CreateTime       int64  `protobuf:"varint,12,req" json:"CreateTime"`
	Vip              int32  `protobuf:"varint,13,req" json:"Vip"`
	Level            int32  `protobuf:"varint,14,req" json:"Level"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProtoUser) Reset()         { *m = ProtoUser{} }
func (m *ProtoUser) String() string { return proto.CompactTextString(m) }
func (*ProtoUser) ProtoMessage()    {}

func (m *ProtoUser) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *ProtoUser) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ProtoUser) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *ProtoUser) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *ProtoUser) GetPlatform() uint64 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ProtoUser) GetChannel() uint64 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ProtoUser) GetServer() uint64 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *ProtoUser) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ProtoUser) GetOs() int32 {
	if m != nil {
		return m.Os
	}
	return 0
}

func (m *ProtoUser) GetOsVersion() int32 {
	if m != nil {
		return m.OsVersion
	}
	return 0
}

func (m *ProtoUser) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *ProtoUser) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ProtoUser) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *ProtoUser) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
}
func (m *ProtoUser) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Uin |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(data[index:postIndex])
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Platform |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Channel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Server |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(data[index:postIndex])
			index = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Os |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.OsVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(data[index:postIndex])
			index = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Vip |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ProtoUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSerial(uint64(m.Uin))
	l = len(m.AccountId)
	n += 1 + l + sovSerial(uint64(l))
	l = len(m.AccountName)
	n += 1 + l + sovSerial(uint64(l))
	n += 1 + sovSerial(uint64(m.Gender))
	n += 1 + sovSerial(uint64(m.Platform))
	n += 1 + sovSerial(uint64(m.Channel))
	n += 1 + sovSerial(uint64(m.Server))
	l = len(m.Uuid)
	n += 1 + l + sovSerial(uint64(l))
	n += 1 + sovSerial(uint64(m.Os))
	n += 1 + sovSerial(uint64(m.OsVersion))
	l = len(m.DeviceModel)
	n += 1 + l + sovSerial(uint64(l))
	n += 1 + sovSerial(uint64(m.CreateTime))
	n += 1 + sovSerial(uint64(m.Vip))
	n += 1 + sovSerial(uint64(m.Level))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSerial(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSerial(x uint64) (n int) {
	return sovSerial(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtoUser) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtoUser) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintSerial(data, i, uint64(m.Uin))
	data[i] = 0x12
	i++
	i = encodeVarintSerial(data, i, uint64(len(m.AccountId)))
	i += copy(data[i:], m.AccountId)
	data[i] = 0x1a
	i++
	i = encodeVarintSerial(data, i, uint64(len(m.AccountName)))
	i += copy(data[i:], m.AccountName)
	data[i] = 0x20
	i++
	i = encodeVarintSerial(data, i, uint64(m.Gender))
	data[i] = 0x28
	i++
	i = encodeVarintSerial(data, i, uint64(m.Platform))
	data[i] = 0x30
	i++
	i = encodeVarintSerial(data, i, uint64(m.Channel))
	data[i] = 0x38
	i++
	i = encodeVarintSerial(data, i, uint64(m.Server))
	data[i] = 0x42
	i++
	i = encodeVarintSerial(data, i, uint64(len(m.Uuid)))
	i += copy(data[i:], m.Uuid)
	data[i] = 0x48
	i++
	i = encodeVarintSerial(data, i, uint64(m.Os))
	data[i] = 0x50
	i++
	i = encodeVarintSerial(data, i, uint64(m.OsVersion))
	data[i] = 0x5a
	i++
	i = encodeVarintSerial(data, i, uint64(len(m.DeviceModel)))
	i += copy(data[i:], m.DeviceModel)
	data[i] = 0x60
	i++
	i = encodeVarintSerial(data, i, uint64(m.CreateTime))
	data[i] = 0x68
	i++
	i = encodeVarintSerial(data, i, uint64(m.Vip))
	data[i] = 0x70
	i++
	i = encodeVarintSerial(data, i, uint64(m.Level))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Serial(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Serial(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSerial(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
